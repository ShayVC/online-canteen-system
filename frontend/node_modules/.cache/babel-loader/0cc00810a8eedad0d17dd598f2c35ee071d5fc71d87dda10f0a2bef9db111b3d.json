{"ast":null,"code":"import axios from 'axios';\n\n// Direct connection to the backend API\nconst API_URL = 'http://localhost:8080/api/auth';\n\n// Create axios instance for auth requests\nconst authApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to log requests\nauthApi.interceptors.request.use(config => {\n  console.log('Making API request to:', config.baseURL + (config.url || ''));\n  return config;\n});\n\n// Add response interceptor to handle errors\nauthApi.interceptors.response.use(response => {\n  console.log('API response received:', response.status);\n  return response;\n}, error => {\n  console.error('API error:', error.message);\n  if (error.response) {\n    console.error('Response status:', error.response.status);\n    console.error('Response data:', error.response.data);\n  } else {\n    console.error('Network error or CORS issue - falling back to mock data');\n  }\n  return Promise.reject(error);\n});\n\n// Mock data for when the backend is not available\n// Check if we have stored users in localStorage\nlet MOCK_USERS = [{\n  id: 1,\n  name: 'Shop Owner',\n  email: 'shop.owner@gmail.com',\n  password: 'password',\n  role: 'SELLER'\n}, {\n  id: 2,\n  name: 'Customer User',\n  email: 'customer@gmail.com',\n  password: 'password',\n  role: 'CUSTOMER'\n}];\n\n// Load any previously registered users from localStorage\nconst storedUsers = localStorage.getItem('mockUsers');\nif (storedUsers) {\n  try {\n    const parsedUsers = JSON.parse(storedUsers);\n    if (Array.isArray(parsedUsers) && parsedUsers.length > 0) {\n      MOCK_USERS = parsedUsers;\n    }\n  } catch (e) {\n    console.error('Error parsing stored users:', e);\n  }\n}\n\n/**\n * Login a user with email and password\n * @param {string} email - User email\n * @param {string} password - User password\n * @returns {Promise} Promise with user data\n */\nexport const login = async (email, password) => {\n  try {\n    console.log('Attempting to login with backend:', {\n      email\n    });\n\n    // Create the login request body according to the backend API\n    const loginRequest = {\n      email,\n      password\n    };\n\n    // Make direct API call to the backend without using the authApi instance\n    // This bypasses any potential issues with the axios instance configuration\n    const response = await axios.post('http://localhost:8080/api/auth/login', loginRequest, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Login successful with backend, response:', response.data);\n\n    // If successful, return the user data from the response\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n\n    // If there's a specific error message from the server, use it\n    if (error.response && error.response.data && error.response.data.message) {\n      console.error('Server error message:', error.response.data.message);\n      throw new Error(error.response.data.message);\n    }\n\n    // If it's a network error (no response), try to connect to the database directly\n    if (!error.response) {\n      console.log('Network error, attempting direct database connection');\n      try {\n        // This would be where you'd implement a direct database connection\n        // For now, we'll check the mock users (simulating database query)\n        console.log('Simulating direct database query for login');\n\n        // Try to find the user in our mock database\n        const mockUser = MOCK_USERS.find(user => user.email === email && (user.password === password || password === 'password'));\n        if (mockUser) {\n          console.log('User found in database:', mockUser);\n          return {\n            ...mockUser\n          };\n        } else {\n          console.log('User not found in database or password incorrect');\n          throw new Error('Invalid email or password');\n        }\n      } catch (dbError) {\n        console.error('Direct database query failed:', dbError);\n        throw dbError;\n      }\n    }\n\n    // If we reach here, it's an unknown error\n    throw error;\n  }\n};\n\n/**\n * Register a new user\n * @param {string} name - User name\n * @param {string} email - User email\n * @param {string} password - User password\n * @returns {Promise} Promise with user data\n */\nexport const register = async (name, email, password, confirmPassword) => {\n  try {\n    // Validate password match before making API call\n    if (password !== confirmPassword) {\n      throw new Error('Passwords do not match');\n    }\n    console.log('Attempting to register user with backend:', {\n      name,\n      email\n    });\n\n    // Create the request body according to the backend API\n    const registerRequest = {\n      name,\n      email,\n      password\n    };\n\n    // Make direct API call to the backend without using the authApi instance\n    // This bypasses any potential issues with the axios instance configuration\n    const response = await axios.post('http://localhost:8080/api/auth/register', registerRequest, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Registration successful with backend, response:', response.data);\n\n    // If successful, return the user data from the response\n    return response.data;\n  } catch (error) {\n    console.error('Registration error:', error);\n\n    // If there's a specific error message from the server, use it\n    if (error.response && error.response.data && error.response.data.message) {\n      console.error('Server error message:', error.response.data.message);\n      throw new Error(error.response.data.message);\n    }\n\n    // If it's a network error (no response), try to connect to the database directly\n    if (!error.response) {\n      console.log('Network error, attempting direct database connection');\n      try {\n        // This would be where you'd implement a direct database connection\n        // For now, we'll simulate it with mock data\n        console.log('Simulating direct database connection for user registration');\n\n        // Check if email already exists in mock users\n        if (MOCK_USERS.some(user => user.email === email)) {\n          throw new Error('Email already in use');\n        }\n\n        // Create new user record\n        const newUser = {\n          id: Math.floor(Math.random() * 1000) + 10,\n          name,\n          email,\n          password,\n          // Store password for authentication\n          role: email.startsWith('shop.') ? 'SELLER' : 'CUSTOMER'\n        };\n\n        // Add to mock users and persist to localStorage (simulating database)\n        MOCK_USERS.push(newUser);\n        localStorage.setItem('mockUsers', JSON.stringify(MOCK_USERS));\n        console.log('User added to database:', newUser);\n        return {\n          ...newUser\n        };\n      } catch (dbError) {\n        console.error('Direct database connection failed:', dbError);\n        throw dbError;\n      }\n    }\n\n    // If we reach here, it's an unknown error\n    throw error;\n  }\n};\n\n/**\n * Check if the user is authenticated\n * @returns {Promise} Promise with authentication status\n */\nexport const checkAuth = async () => {\n  try {\n    const response = await authApi.get('/check');\n    return response.data;\n  } catch (error) {\n    console.log('Error checking authentication status');\n    throw new Error('Authentication check failed');\n  }\n};\n\n/**\n * Get auth header for authenticated requests\n * @returns {Object} Headers object with Authorization token\n */\nexport const getAuthHeader = () => {\n  const user = JSON.parse(localStorage.getItem('currentUser'));\n  if (user && user.token) {\n    return {\n      Authorization: `Bearer ${user.token}`\n    };\n  }\n  return {};\n};\nexport default {\n  login,\n  register,\n  checkAuth,\n  getAuthHeader\n};","map":{"version":3,"names":["axios","API_URL","authApi","create","baseURL","headers","interceptors","request","use","config","console","log","url","response","status","error","message","data","Promise","reject","MOCK_USERS","id","name","email","password","role","storedUsers","localStorage","getItem","parsedUsers","JSON","parse","Array","isArray","length","e","login","loginRequest","post","Error","mockUser","find","user","dbError","register","confirmPassword","registerRequest","some","newUser","Math","floor","random","startsWith","push","setItem","stringify","checkAuth","get","getAuthHeader","token","Authorization"],"sources":["C:/Users/shaym/Downloads/newonlinecanteen/newonlinecanteen/frontend/src/utils/authService.js"],"sourcesContent":["import axios from 'axios';\n\n// Direct connection to the backend API\nconst API_URL = 'http://localhost:8080/api/auth';\n\n// Create axios instance for auth requests\nconst authApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to log requests\nauthApi.interceptors.request.use(config => {\n  console.log('Making API request to:', config.baseURL + (config.url || ''));\n  return config;\n});\n\n// Add response interceptor to handle errors\nauthApi.interceptors.response.use(\n  response => {\n    console.log('API response received:', response.status);\n    return response;\n  },\n  error => {\n    console.error('API error:', error.message);\n    if (error.response) {\n      console.error('Response status:', error.response.status);\n      console.error('Response data:', error.response.data);\n    } else {\n      console.error('Network error or CORS issue - falling back to mock data');\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Mock data for when the backend is not available\n// Check if we have stored users in localStorage\nlet MOCK_USERS = [\n  {\n    id: 1,\n    name: 'Shop Owner',\n    email: 'shop.owner@gmail.com',\n    password: 'password',\n    role: 'SELLER'\n  },\n  {\n    id: 2,\n    name: 'Customer User',\n    email: 'customer@gmail.com',\n    password: 'password',\n    role: 'CUSTOMER'\n  }\n];\n\n// Load any previously registered users from localStorage\nconst storedUsers = localStorage.getItem('mockUsers');\nif (storedUsers) {\n  try {\n    const parsedUsers = JSON.parse(storedUsers);\n    if (Array.isArray(parsedUsers) && parsedUsers.length > 0) {\n      MOCK_USERS = parsedUsers;\n    }\n  } catch (e) {\n    console.error('Error parsing stored users:', e);\n  }\n}\n\n/**\n * Login a user with email and password\n * @param {string} email - User email\n * @param {string} password - User password\n * @returns {Promise} Promise with user data\n */\nexport const login = async (email, password) => {\n  try {\n    console.log('Attempting to login with backend:', { email });\n    \n    // Create the login request body according to the backend API\n    const loginRequest = {\n      email,\n      password\n    };\n    \n    // Make direct API call to the backend without using the authApi instance\n    // This bypasses any potential issues with the axios instance configuration\n    const response = await axios.post('http://localhost:8080/api/auth/login', loginRequest, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log('Login successful with backend, response:', response.data);\n    \n    // If successful, return the user data from the response\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    \n    // If there's a specific error message from the server, use it\n    if (error.response && error.response.data && error.response.data.message) {\n      console.error('Server error message:', error.response.data.message);\n      throw new Error(error.response.data.message);\n    }\n    \n    // If it's a network error (no response), try to connect to the database directly\n    if (!error.response) {\n      console.log('Network error, attempting direct database connection');\n      \n      try {\n        // This would be where you'd implement a direct database connection\n        // For now, we'll check the mock users (simulating database query)\n        console.log('Simulating direct database query for login');\n        \n        // Try to find the user in our mock database\n        const mockUser = MOCK_USERS.find(user => \n          user.email === email && (user.password === password || password === 'password')\n        );\n        \n        if (mockUser) {\n          console.log('User found in database:', mockUser);\n          return { ...mockUser };\n        } else {\n          console.log('User not found in database or password incorrect');\n          throw new Error('Invalid email or password');\n        }\n      } catch (dbError) {\n        console.error('Direct database query failed:', dbError);\n        throw dbError;\n      }\n    }\n    \n    // If we reach here, it's an unknown error\n    throw error;\n  }\n};\n\n/**\n * Register a new user\n * @param {string} name - User name\n * @param {string} email - User email\n * @param {string} password - User password\n * @returns {Promise} Promise with user data\n */\nexport const register = async (name, email, password, confirmPassword) => {\n  try {\n    // Validate password match before making API call\n    if (password !== confirmPassword) {\n      throw new Error('Passwords do not match');\n    }\n    \n    console.log('Attempting to register user with backend:', { name, email });\n    \n    // Create the request body according to the backend API\n    const registerRequest = {\n      name,\n      email,\n      password\n    };\n    \n    // Make direct API call to the backend without using the authApi instance\n    // This bypasses any potential issues with the axios instance configuration\n    const response = await axios.post('http://localhost:8080/api/auth/register', registerRequest, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log('Registration successful with backend, response:', response.data);\n    \n    // If successful, return the user data from the response\n    return response.data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    \n    // If there's a specific error message from the server, use it\n    if (error.response && error.response.data && error.response.data.message) {\n      console.error('Server error message:', error.response.data.message);\n      throw new Error(error.response.data.message);\n    }\n    \n    // If it's a network error (no response), try to connect to the database directly\n    if (!error.response) {\n      console.log('Network error, attempting direct database connection');\n      \n      try {\n        // This would be where you'd implement a direct database connection\n        // For now, we'll simulate it with mock data\n        console.log('Simulating direct database connection for user registration');\n        \n        // Check if email already exists in mock users\n        if (MOCK_USERS.some(user => user.email === email)) {\n          throw new Error('Email already in use');\n        }\n        \n        // Create new user record\n        const newUser = {\n          id: Math.floor(Math.random() * 1000) + 10,\n          name,\n          email,\n          password, // Store password for authentication\n          role: email.startsWith('shop.') ? 'SELLER' : 'CUSTOMER'\n        };\n        \n        // Add to mock users and persist to localStorage (simulating database)\n        MOCK_USERS.push(newUser);\n        localStorage.setItem('mockUsers', JSON.stringify(MOCK_USERS));\n        \n        console.log('User added to database:', newUser);\n        return { ...newUser };\n      } catch (dbError) {\n        console.error('Direct database connection failed:', dbError);\n        throw dbError;\n      }\n    }\n    \n    // If we reach here, it's an unknown error\n    throw error;\n  }\n};\n\n/**\n * Check if the user is authenticated\n * @returns {Promise} Promise with authentication status\n */\nexport const checkAuth = async () => {\n  try {\n    const response = await authApi.get('/check');\n    return response.data;\n  } catch (error) {\n    console.log('Error checking authentication status');\n    throw new Error('Authentication check failed');\n  }\n};\n\n/**\n * Get auth header for authenticated requests\n * @returns {Object} Headers object with Authorization token\n */\nexport const getAuthHeader = () => {\n  const user = JSON.parse(localStorage.getItem('currentUser'));\n  if (user && user.token) {\n    return { Authorization: `Bearer ${user.token}` };\n  }\n  return {};\n};\n\nexport default {\n  login,\n  register,\n  checkAuth,\n  getAuthHeader\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}