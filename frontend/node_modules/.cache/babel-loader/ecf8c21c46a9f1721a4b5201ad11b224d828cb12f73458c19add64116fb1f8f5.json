{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shaym\\\\Downloads\\\\newonlinecanteen\\\\newonlinecanteen\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { login as apiLogin, register as apiRegister } from '../utils/authService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user from localStorage on initial render\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  // Check if email belongs to a seller (starts with \"shop.\")\n  const checkIsSeller = email => {\n    return email.startsWith('shop.');\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n\n      // Call the API login function\n      const userData = await apiLogin(email, password);\n\n      // Normalize role casing for consistency in the frontend\n      const normalizedUser = {\n        ...userData,\n        role: userData.role.toLowerCase()\n      };\n\n      // Store user in localStorage\n      localStorage.setItem('currentUser', JSON.stringify(normalizedUser));\n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (name, email, password, confirmPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Validate inputs\n      if (!name || !email || !password) {\n        throw new Error('Name, email, and password are required');\n      }\n      if (password !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      console.log('Registering user:', {\n        name,\n        email,\n        password: '***',\n        confirmPassword: '***'\n      });\n\n      // Call the API register function with all parameters\n      const userData = await apiRegister(name, email, password, confirmPassword);\n      console.log('Registration successful, received user data:', userData);\n\n      // Normalize role casing for consistency in the frontend\n      const normalizedUser = {\n        ...userData,\n        role: userData.role ? userData.role.toLowerCase() : 'customer' // Default to customer if role is not provided\n      };\n      console.log('Normalized user data:', normalizedUser);\n\n      // Store user in localStorage\n      localStorage.setItem('currentUser', JSON.stringify(normalizedUser));\n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isSeller: checkIsSeller,\n    isAuthenticated: !!currentUser,\n    isCustomer: currentUser && currentUser.role === 'customer',\n    isSeller: currentUser && currentUser.role === 'seller'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"JNizP9FwoqjqDhcaQoKbEEqEJbk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","login","apiLogin","register","apiRegister","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","error","setError","storedUser","localStorage","getItem","JSON","parse","checkIsSeller","email","startsWith","password","Error","userData","normalizedUser","role","toLowerCase","setItem","stringify","err","message","name","confirmPassword","console","log","logout","removeItem","info","value","isSeller","isAuthenticated","isCustomer","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shaym/Downloads/newonlinecanteen/newonlinecanteen/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { login as apiLogin, register as apiRegister } from '../utils/authService';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user from localStorage on initial render\n  useEffect(() => {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  // Check if email belongs to a seller (starts with \"shop.\")\n  const checkIsSeller = (email) => {\n    return email.startsWith('shop.');\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n      \n      // Call the API login function\n      const userData = await apiLogin(email, password);\n      \n      // Normalize role casing for consistency in the frontend\n      const normalizedUser = {\n        ...userData,\n        role: userData.role.toLowerCase()\n      };\n      \n      // Store user in localStorage\n      localStorage.setItem('currentUser', JSON.stringify(normalizedUser));\n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (name, email, password, confirmPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Validate inputs\n      if (!name || !email || !password) {\n        throw new Error('Name, email, and password are required');\n      }\n      \n      if (password !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      \n      console.log('Registering user:', { name, email, password: '***', confirmPassword: '***' });\n      \n      // Call the API register function with all parameters\n      const userData = await apiRegister(name, email, password, confirmPassword);\n      \n      console.log('Registration successful, received user data:', userData);\n      \n      // Normalize role casing for consistency in the frontend\n      const normalizedUser = {\n        ...userData,\n        role: userData.role ? userData.role.toLowerCase() : 'customer' // Default to customer if role is not provided\n      };\n      \n      console.log('Normalized user data:', normalizedUser);\n      \n      // Store user in localStorage\n      localStorage.setItem('currentUser', JSON.stringify(normalizedUser));\n      setCurrentUser(normalizedUser);\n      return normalizedUser;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n    toast.info('You have been logged out');\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isSeller: checkIsSeller,\n    isAuthenticated: !!currentUser,\n    isCustomer: currentUser && currentUser.role === 'customer',\n    isSeller: currentUser && currentUser.role === 'seller',\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}