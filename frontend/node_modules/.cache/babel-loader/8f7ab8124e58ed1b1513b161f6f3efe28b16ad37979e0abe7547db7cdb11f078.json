{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/users';\n\n// Mock data for when the API is unavailable\nconst MOCK_USERS = [{\n  userId: 1,\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n  password: '********'\n}, {\n  userId: 2,\n  name: 'Jane Smith',\n  email: 'jane.smith@example.com',\n  password: '********'\n}, {\n  userId: 3,\n  name: 'Michael Johnson',\n  email: 'michael.johnson@example.com',\n  password: '********'\n}, {\n  userId: 4,\n  name: 'Emily Davis',\n  email: 'emily.davis@example.com',\n  password: '********'\n}, {\n  userId: 5,\n  name: 'Robert Wilson',\n  email: 'robert.wilson@example.com',\n  password: '********'\n}];\n\n// Add a delay to simulate API response time\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const getAllUsers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/getAllUsers`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    // Return mock data\n    await delay(500); // Simulate API delay\n    return MOCK_USERS;\n  }\n};\nexport const getUserById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching user with id ${id}:`, error);\n    // Return mock data for the requested ID\n    const mockUser = MOCK_USERS.find(user => user.userId === parseInt(id));\n    if (mockUser) {\n      await delay(300); // Simulate API delay\n      return mockUser;\n    }\n    throw error;\n  }\n};\nexport const createUser = async userData => {\n  try {\n    console.log('Sending user data to API:', userData);\n    const response = await axios.post(`${API_URL}/createUser`, userData);\n    console.log('API response for user creation:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating user:', error);\n    // Create a mock user with a new ID and add it to the mock data\n    const newId = Math.max(...MOCK_USERS.map(user => user.userId), 0) + 1;\n    const newUser = {\n      ...userData,\n      userId: newId\n    };\n    MOCK_USERS.push(newUser); // Add to mock data array for future reference\n    console.log('Created mock user:', newUser);\n    await delay(500); // Simulate API delay\n    return newUser;\n  }\n};\nexport const updateUser = async (id, userData) => {\n  try {\n    console.log(`Updating user with id ${id}:`, userData);\n    const response = await axios.put(`${API_URL}/${id}`, userData);\n    console.log('API response for user update:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating user with id ${id}:`, error);\n    // Update the user in the mock data array\n    const userIndex = MOCK_USERS.findIndex(user => user.userId === parseInt(id));\n    const updatedUser = {\n      ...userData,\n      userId: parseInt(id)\n    };\n    if (userIndex !== -1) {\n      MOCK_USERS[userIndex] = updatedUser;\n      console.log('Updated mock user:', updatedUser);\n    }\n    await delay(500); // Simulate API delay\n    return updatedUser;\n  }\n};\nexport const deleteUser = async id => {\n  try {\n    console.log(`Deleting user with id ${id}`);\n    await axios.delete(`${API_URL}/${id}`);\n    console.log(`User with id ${id} deleted successfully`);\n    return true;\n  } catch (error) {\n    console.error(`Error deleting user with id ${id}:`, error);\n    // Remove the user from the mock data array\n    const userIndex = MOCK_USERS.findIndex(user => user.userId === parseInt(id));\n    if (userIndex !== -1) {\n      MOCK_USERS.splice(userIndex, 1);\n      console.log(`Removed user with id ${id} from mock data`);\n    }\n    await delay(500); // Simulate API delay\n    return true;\n  }\n};","map":{"version":3,"names":["axios","API_URL","MOCK_USERS","userId","name","email","password","delay","ms","Promise","resolve","setTimeout","getAllUsers","response","get","data","error","console","getUserById","id","mockUser","find","user","parseInt","createUser","userData","log","post","newId","Math","max","map","newUser","push","updateUser","put","userIndex","findIndex","updatedUser","deleteUser","delete","splice"],"sources":["C:/Users/shaym/Downloads/newonlinecanteen/newonlinecanteen/frontend/src/utils/userService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api/users';\n\n// Mock data for when the API is unavailable\nconst MOCK_USERS = [\n  { userId: 1, name: 'John Doe', email: 'john.doe@example.com', password: '********' },\n  { userId: 2, name: 'Jane Smith', email: 'jane.smith@example.com', password: '********' },\n  { userId: 3, name: 'Michael Johnson', email: 'michael.johnson@example.com', password: '********' },\n  { userId: 4, name: 'Emily Davis', email: 'emily.davis@example.com', password: '********' },\n  { userId: 5, name: 'Robert Wilson', email: 'robert.wilson@example.com', password: '********' }\n];\n\n// Add a delay to simulate API response time\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const getAllUsers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/getAllUsers`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    // Return mock data\n    await delay(500); // Simulate API delay\n    return MOCK_USERS;\n  }\n};\n\nexport const getUserById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching user with id ${id}:`, error);\n    // Return mock data for the requested ID\n    const mockUser = MOCK_USERS.find(user => user.userId === parseInt(id));\n    if (mockUser) {\n      await delay(300); // Simulate API delay\n      return mockUser;\n    }\n    throw error;\n  }\n};\n\nexport const createUser = async (userData) => {\n  try {\n    console.log('Sending user data to API:', userData);\n    const response = await axios.post(`${API_URL}/createUser`, userData);\n    console.log('API response for user creation:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating user:', error);\n    // Create a mock user with a new ID and add it to the mock data\n    const newId = Math.max(...MOCK_USERS.map(user => user.userId), 0) + 1;\n    const newUser = { ...userData, userId: newId };\n    MOCK_USERS.push(newUser); // Add to mock data array for future reference\n    console.log('Created mock user:', newUser);\n    await delay(500); // Simulate API delay\n    return newUser;\n  }\n};\n\nexport const updateUser = async (id, userData) => {\n  try {\n    console.log(`Updating user with id ${id}:`, userData);\n    const response = await axios.put(`${API_URL}/${id}`, userData);\n    console.log('API response for user update:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating user with id ${id}:`, error);\n    // Update the user in the mock data array\n    const userIndex = MOCK_USERS.findIndex(user => user.userId === parseInt(id));\n    const updatedUser = { ...userData, userId: parseInt(id) };\n    \n    if (userIndex !== -1) {\n      MOCK_USERS[userIndex] = updatedUser;\n      console.log('Updated mock user:', updatedUser);\n    }\n    \n    await delay(500); // Simulate API delay\n    return updatedUser;\n  }\n};\n\nexport const deleteUser = async (id) => {\n  try {\n    console.log(`Deleting user with id ${id}`);\n    await axios.delete(`${API_URL}/${id}`);\n    console.log(`User with id ${id} deleted successfully`);\n    return true;\n  } catch (error) {\n    console.error(`Error deleting user with id ${id}:`, error);\n    // Remove the user from the mock data array\n    const userIndex = MOCK_USERS.findIndex(user => user.userId === parseInt(id));\n    \n    if (userIndex !== -1) {\n      MOCK_USERS.splice(userIndex, 1);\n      console.log(`Removed user with id ${id} from mock data`);\n    }\n    \n    await delay(500); // Simulate API delay\n    return true;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}