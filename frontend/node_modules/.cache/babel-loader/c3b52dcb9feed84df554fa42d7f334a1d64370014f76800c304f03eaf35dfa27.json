{"ast":null,"code":"import axios from 'axios';\nimport { getAuthHeader } from './authService';\n\n// Mock data for when the backend is not available\nlet MOCK_FOOD_ITEMS = localStorage.getItem('mockFoodItems') ? JSON.parse(localStorage.getItem('mockFoodItems')) : [{\n  id: 1,\n  name: 'Chicken Burger',\n  description: 'Delicious chicken burger with fresh vegetables',\n  price: 5.99,\n  quantity: 50,\n  available: true,\n  shop_id: 1\n}, {\n  id: 2,\n  name: 'French Fries',\n  description: 'Crispy golden french fries',\n  price: 2.99,\n  quantity: 100,\n  available: true,\n  shop_id: 1\n}, {\n  id: 3,\n  name: 'Coca Cola',\n  description: 'Refreshing cola drink',\n  price: 1.99,\n  quantity: 200,\n  available: true,\n  shop_id: 1\n}];\n\n// Save mock data to localStorage\nconst saveMockFoodItems = () => {\n  localStorage.setItem('mockFoodItems', JSON.stringify(MOCK_FOOD_ITEMS));\n};\nconst API_URL = 'http://localhost:8080/api/food';\n\n// Get all food items\nexport const getAllFoodItems = async () => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching food items:', error);\n\n    // Return mock data if backend is unavailable\n    console.log('Using mock food items data');\n    return MOCK_FOOD_ITEMS;\n  }\n};\n\n// Get food items by shop ID\nexport const getFoodItemsByShop = async shopId => {\n  try {\n    const response = await axios.get(`${API_URL}/shop/${shopId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching food items for shop ${shopId}:`, error);\n\n    // Return mock data filtered by shop ID if backend is unavailable\n    console.log(`Using mock food items data for shop ${shopId}`);\n    return MOCK_FOOD_ITEMS.filter(item => item.shop_id === parseInt(shopId));\n  }\n};\n\n// Get a food item by ID\nexport const getFoodItemById = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching food item ${id}:`, error);\n\n    // Return mock food item by ID if backend is unavailable\n    console.log(`Using mock food item data for ID ${id}`);\n    const mockItem = MOCK_FOOD_ITEMS.find(item => item.id === parseInt(id));\n    if (!mockItem) throw new Error(`Food item with ID ${id} not found`);\n    return mockItem;\n  }\n};\n\n// Create a new food item (for sellers only)\nexport const createFoodItem = async (foodItemData, shopId, userId) => {\n  try {\n    const response = await axios.post(API_URL, foodItemData, {\n      params: {\n        shopId,\n        userId\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating food item:', error);\n\n    // Create mock food item if backend is unavailable\n    console.log('Creating mock food item');\n    const newId = Math.max(...MOCK_FOOD_ITEMS.map(item => item.id), 0) + 1;\n    const newFoodItem = {\n      id: newId,\n      name: foodItemData.name,\n      description: foodItemData.description || '',\n      price: parseFloat(foodItemData.price) || 0,\n      quantity: parseInt(foodItemData.quantity) || 0,\n      available: foodItemData.available !== false,\n      shop_id: parseInt(shopId)\n    };\n    MOCK_FOOD_ITEMS.push(newFoodItem);\n    saveMockFoodItems();\n    return newFoodItem;\n  }\n};\n\n// Update a food item (for sellers only)\nexport const updateFoodItem = async (id, foodItemData, userId) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, foodItemData, {\n      params: {\n        userId\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating food item ${id}:`, error);\n\n    // Update mock food item if backend is unavailable\n    console.log(`Updating mock food item with ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n\n    // Update the food item\n    MOCK_FOOD_ITEMS[index] = {\n      ...MOCK_FOOD_ITEMS[index],\n      name: foodItemData.name || MOCK_FOOD_ITEMS[index].name,\n      description: foodItemData.description || MOCK_FOOD_ITEMS[index].description,\n      price: parseFloat(foodItemData.price) || MOCK_FOOD_ITEMS[index].price,\n      quantity: parseInt(foodItemData.quantity) || MOCK_FOOD_ITEMS[index].quantity,\n      available: foodItemData.available !== undefined ? foodItemData.available : MOCK_FOOD_ITEMS[index].available\n    };\n    saveMockFoodItems();\n    return MOCK_FOOD_ITEMS[index];\n  }\n};\n\n// Delete a food item (for sellers only)\nexport const deleteFoodItem = async (id, userId) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`, {\n      params: {\n        userId\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting food item ${id}:`, error);\n\n    // Delete mock food item if backend is unavailable\n    console.log(`Deleting mock food item with ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n\n    // Remove the food item\n    const deletedItem = MOCK_FOOD_ITEMS[index];\n    MOCK_FOOD_ITEMS = MOCK_FOOD_ITEMS.filter(item => item.id !== parseInt(id));\n    saveMockFoodItems();\n    return {\n      message: 'Food item deleted successfully',\n      deletedItem\n    };\n  }\n};\n\n// Update food item availability (for sellers only)\nexport const updateFoodItemAvailability = async (id, available, userId) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}/availability`, {\n      available\n    }, {\n      params: {\n        userId\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating food item ${id} availability:`, error);\n\n    // Update mock food item availability if backend is unavailable\n    console.log(`Updating mock food item availability for ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n\n    // Update availability\n    MOCK_FOOD_ITEMS[index].available = available;\n    saveMockFoodItems();\n    return MOCK_FOOD_ITEMS[index];\n  }\n};\n\n// Mock order-related functions\n\n// Get my orders (for customers)\nexport const getMyOrders = async userId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/orders/my-orders`, {\n      params: {\n        userId\n      },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching my orders:`, error);\n\n    // Return mock orders if backend is unavailable\n    console.log('Using mock orders data');\n    const mockOrders = localStorage.getItem('mockOrders') ? JSON.parse(localStorage.getItem('mockOrders')) : [];\n    return mockOrders.filter(order => order.customer_id === parseInt(userId));\n  }\n};\n\n// Place a new order (for customers)\nexport const placeOrder = async orderData => {\n  try {\n    const response = await axios.post(`http://localhost:8080/api/orders`, orderData, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error placing order:', error);\n\n    // Create mock order if backend is unavailable\n    console.log('Creating mock order');\n\n    // Get existing orders or initialize empty array\n    const mockOrders = localStorage.getItem('mockOrders') ? JSON.parse(localStorage.getItem('mockOrders')) : [];\n    const newOrderId = mockOrders.length > 0 ? Math.max(...mockOrders.map(order => order.id)) + 1 : 1;\n    const newOrder = {\n      id: newOrderId,\n      customer_id: orderData.customer_id,\n      shop_id: orderData.shop_id,\n      items: orderData.items,\n      total_price: orderData.total_price,\n      status: 'PENDING',\n      created_at: new Date().toISOString()\n    };\n    mockOrders.push(newOrder);\n    localStorage.setItem('mockOrders', JSON.stringify(mockOrders));\n\n    // Update food item quantities\n    orderData.items.forEach(item => {\n      const foodItem = MOCK_FOOD_ITEMS.find(food => food.id === item.food_id);\n      if (foodItem) {\n        foodItem.quantity = Math.max(0, foodItem.quantity - item.quantity);\n      }\n    });\n    saveMockFoodItems();\n    return newOrder;\n  }\n};\n\n// Get shop orders (for sellers)\nexport const getShopOrders = async shopId => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/orders/shop/${shopId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching shop orders:`, error);\n\n    // Return mock orders for shop if backend is unavailable\n    console.log(`Using mock orders data for shop ${shopId}`);\n    const mockOrders = localStorage.getItem('mockOrders') ? JSON.parse(localStorage.getItem('mockOrders')) : [];\n    return mockOrders.filter(order => order.shop_id === parseInt(shopId));\n  }\n};\n\n// Update order status (for sellers)\nexport const updateOrderStatus = async (orderId, status) => {\n  try {\n    const response = await axios.put(`http://localhost:8080/api/orders/${orderId}/status`, {\n      status\n    }, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating order status:`, error);\n\n    // Update mock order status if backend is unavailable\n    console.log(`Updating mock order status for ID ${orderId}`);\n    const mockOrders = localStorage.getItem('mockOrders') ? JSON.parse(localStorage.getItem('mockOrders')) : [];\n    const index = mockOrders.findIndex(order => order.id === parseInt(orderId));\n    if (index === -1) throw new Error(`Order with ID ${orderId} not found`);\n    mockOrders[index].status = status;\n    localStorage.setItem('mockOrders', JSON.stringify(mockOrders));\n    return mockOrders[index];\n  }\n};","map":{"version":3,"names":["axios","getAuthHeader","MOCK_FOOD_ITEMS","localStorage","getItem","JSON","parse","id","name","description","price","quantity","available","shop_id","saveMockFoodItems","setItem","stringify","API_URL","getAllFoodItems","response","get","headers","data","error","console","log","getFoodItemsByShop","shopId","filter","item","parseInt","getFoodItemById","mockItem","find","Error","createFoodItem","foodItemData","userId","post","params","newId","Math","max","map","newFoodItem","parseFloat","push","updateFoodItem","put","index","findIndex","undefined","deleteFoodItem","delete","deletedItem","message","updateFoodItemAvailability","getMyOrders","mockOrders","order","customer_id","placeOrder","orderData","newOrderId","length","newOrder","items","total_price","status","created_at","Date","toISOString","forEach","foodItem","food","food_id","getShopOrders","updateOrderStatus","orderId"],"sources":["C:/Users/shaym/Downloads/newonlinecanteen/newonlinecanteen/frontend/src/utils/foodItemService.js"],"sourcesContent":["import axios from 'axios';\nimport { getAuthHeader } from './authService';\n\n// Mock data for when the backend is not available\nlet MOCK_FOOD_ITEMS = localStorage.getItem('mockFoodItems') ? \n  JSON.parse(localStorage.getItem('mockFoodItems')) : [\n  {\n    id: 1,\n    name: 'Chicken Burger',\n    description: 'Delicious chicken burger with fresh vegetables',\n    price: 5.99,\n    quantity: 50,\n    available: true,\n    shop_id: 1\n  },\n  {\n    id: 2,\n    name: 'French Fries',\n    description: 'Crispy golden french fries',\n    price: 2.99,\n    quantity: 100,\n    available: true,\n    shop_id: 1\n  },\n  {\n    id: 3,\n    name: 'Coca Cola',\n    description: 'Refreshing cola drink',\n    price: 1.99,\n    quantity: 200,\n    available: true,\n    shop_id: 1\n  }\n];\n\n// Save mock data to localStorage\nconst saveMockFoodItems = () => {\n  localStorage.setItem('mockFoodItems', JSON.stringify(MOCK_FOOD_ITEMS));\n};\n\nconst API_URL = 'http://localhost:8080/api/food';\n\n// Get all food items\nexport const getAllFoodItems = async () => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching food items:', error);\n    \n    // Return mock data if backend is unavailable\n    console.log('Using mock food items data');\n    return MOCK_FOOD_ITEMS;\n  }\n};\n\n// Get food items by shop ID\nexport const getFoodItemsByShop = async (shopId) => {\n  try {\n    const response = await axios.get(`${API_URL}/shop/${shopId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching food items for shop ${shopId}:`, error);\n    \n    // Return mock data filtered by shop ID if backend is unavailable\n    console.log(`Using mock food items data for shop ${shopId}`);\n    return MOCK_FOOD_ITEMS.filter(item => item.shop_id === parseInt(shopId));\n  }\n};\n\n// Get a food item by ID\nexport const getFoodItemById = async (id) => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching food item ${id}:`, error);\n    \n    // Return mock food item by ID if backend is unavailable\n    console.log(`Using mock food item data for ID ${id}`);\n    const mockItem = MOCK_FOOD_ITEMS.find(item => item.id === parseInt(id));\n    if (!mockItem) throw new Error(`Food item with ID ${id} not found`);\n    return mockItem;\n  }\n};\n\n// Create a new food item (for sellers only)\nexport const createFoodItem = async (foodItemData, shopId, userId) => {\n  try {\n    const response = await axios.post(API_URL, foodItemData, {\n      params: { shopId, userId },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating food item:', error);\n    \n    // Create mock food item if backend is unavailable\n    console.log('Creating mock food item');\n    const newId = Math.max(...MOCK_FOOD_ITEMS.map(item => item.id), 0) + 1;\n    \n    const newFoodItem = {\n      id: newId,\n      name: foodItemData.name,\n      description: foodItemData.description || '',\n      price: parseFloat(foodItemData.price) || 0,\n      quantity: parseInt(foodItemData.quantity) || 0,\n      available: foodItemData.available !== false,\n      shop_id: parseInt(shopId)\n    };\n    \n    MOCK_FOOD_ITEMS.push(newFoodItem);\n    saveMockFoodItems();\n    \n    return newFoodItem;\n  }\n};\n\n// Update a food item (for sellers only)\nexport const updateFoodItem = async (id, foodItemData, userId) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, foodItemData, {\n      params: { userId },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating food item ${id}:`, error);\n    \n    // Update mock food item if backend is unavailable\n    console.log(`Updating mock food item with ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    \n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n    \n    // Update the food item\n    MOCK_FOOD_ITEMS[index] = {\n      ...MOCK_FOOD_ITEMS[index],\n      name: foodItemData.name || MOCK_FOOD_ITEMS[index].name,\n      description: foodItemData.description || MOCK_FOOD_ITEMS[index].description,\n      price: parseFloat(foodItemData.price) || MOCK_FOOD_ITEMS[index].price,\n      quantity: parseInt(foodItemData.quantity) || MOCK_FOOD_ITEMS[index].quantity,\n      available: foodItemData.available !== undefined ? foodItemData.available : MOCK_FOOD_ITEMS[index].available\n    };\n    \n    saveMockFoodItems();\n    return MOCK_FOOD_ITEMS[index];\n  }\n};\n\n// Delete a food item (for sellers only)\nexport const deleteFoodItem = async (id, userId) => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`, {\n      params: { userId },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error deleting food item ${id}:`, error);\n    \n    // Delete mock food item if backend is unavailable\n    console.log(`Deleting mock food item with ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    \n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n    \n    // Remove the food item\n    const deletedItem = MOCK_FOOD_ITEMS[index];\n    MOCK_FOOD_ITEMS = MOCK_FOOD_ITEMS.filter(item => item.id !== parseInt(id));\n    \n    saveMockFoodItems();\n    return { message: 'Food item deleted successfully', deletedItem };\n  }\n};\n\n// Update food item availability (for sellers only)\nexport const updateFoodItemAvailability = async (id, available, userId) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}/availability`, \n      { available },\n      {\n        params: { userId },\n        headers: getAuthHeader()\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating food item ${id} availability:`, error);\n    \n    // Update mock food item availability if backend is unavailable\n    console.log(`Updating mock food item availability for ID ${id}`);\n    const index = MOCK_FOOD_ITEMS.findIndex(item => item.id === parseInt(id));\n    \n    if (index === -1) throw new Error(`Food item with ID ${id} not found`);\n    \n    // Update availability\n    MOCK_FOOD_ITEMS[index].available = available;\n    \n    saveMockFoodItems();\n    return MOCK_FOOD_ITEMS[index];\n  }\n};\n\n// Mock order-related functions\n\n// Get my orders (for customers)\nexport const getMyOrders = async (userId) => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/orders/my-orders`, {\n      params: { userId },\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching my orders:`, error);\n    \n    // Return mock orders if backend is unavailable\n    console.log('Using mock orders data');\n    const mockOrders = localStorage.getItem('mockOrders') ? \n      JSON.parse(localStorage.getItem('mockOrders')) : [];\n    \n    return mockOrders.filter(order => order.customer_id === parseInt(userId));\n  }\n};\n\n// Place a new order (for customers)\nexport const placeOrder = async (orderData) => {\n  try {\n    const response = await axios.post(`http://localhost:8080/api/orders`, orderData, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error placing order:', error);\n    \n    // Create mock order if backend is unavailable\n    console.log('Creating mock order');\n    \n    // Get existing orders or initialize empty array\n    const mockOrders = localStorage.getItem('mockOrders') ? \n      JSON.parse(localStorage.getItem('mockOrders')) : [];\n    \n    const newOrderId = mockOrders.length > 0 ? \n      Math.max(...mockOrders.map(order => order.id)) + 1 : 1;\n    \n    const newOrder = {\n      id: newOrderId,\n      customer_id: orderData.customer_id,\n      shop_id: orderData.shop_id,\n      items: orderData.items,\n      total_price: orderData.total_price,\n      status: 'PENDING',\n      created_at: new Date().toISOString()\n    };\n    \n    mockOrders.push(newOrder);\n    localStorage.setItem('mockOrders', JSON.stringify(mockOrders));\n    \n    // Update food item quantities\n    orderData.items.forEach(item => {\n      const foodItem = MOCK_FOOD_ITEMS.find(food => food.id === item.food_id);\n      if (foodItem) {\n        foodItem.quantity = Math.max(0, foodItem.quantity - item.quantity);\n      }\n    });\n    saveMockFoodItems();\n    \n    return newOrder;\n  }\n};\n\n// Get shop orders (for sellers)\nexport const getShopOrders = async (shopId) => {\n  try {\n    const response = await axios.get(`http://localhost:8080/api/orders/shop/${shopId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching shop orders:`, error);\n    \n    // Return mock orders for shop if backend is unavailable\n    console.log(`Using mock orders data for shop ${shopId}`);\n    const mockOrders = localStorage.getItem('mockOrders') ? \n      JSON.parse(localStorage.getItem('mockOrders')) : [];\n    \n    return mockOrders.filter(order => order.shop_id === parseInt(shopId));\n  }\n};\n\n// Update order status (for sellers)\nexport const updateOrderStatus = async (orderId, status) => {\n  try {\n    const response = await axios.put(`http://localhost:8080/api/orders/${orderId}/status`, \n      { status },\n      { headers: getAuthHeader() }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating order status:`, error);\n    \n    // Update mock order status if backend is unavailable\n    console.log(`Updating mock order status for ID ${orderId}`);\n    \n    const mockOrders = localStorage.getItem('mockOrders') ? \n      JSON.parse(localStorage.getItem('mockOrders')) : [];\n    \n    const index = mockOrders.findIndex(order => order.id === parseInt(orderId));\n    \n    if (index === -1) throw new Error(`Order with ID ${orderId} not found`);\n    \n    mockOrders[index].status = status;\n    localStorage.setItem('mockOrders', JSON.stringify(mockOrders));\n    \n    return mockOrders[index];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}